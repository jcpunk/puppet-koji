#!/bin/bash
####################################################
# HEADER: This file was autogenerated by puppet.
#
# FILE: modules/koji/files/root/bin/add_koji_server
#
# /home/koji/bin/add_koji_server file for machine [<%= fqdn %>]
#
#####################################################

# setup args in the right order for making getopt evaluation
# nice and easy.  You'll need to read the manpages for more info
args=$(getopt -o hp: -- "$@")
eval set -- "$args"

usage() {
    echo "$0: [-p cpus] hostname" >&2
    echo '' >&2
    echo "  -p : cpus should be set to the number of cpus on hostname" >&2
    echo "       Don't get cute and bump it up, be honest!" >&2
    echo '' >&2
    echo ' An SSL cert will also be attempted' >&2
    echo ' check /etc/pki/koji/pems/ for the results' >&2
    echo '' >&2
    echo ' Examples:' >&2
    echo "  $0 -p 16 myhost.fnal.gov" >&2
    echo "  $0 -p 8 yourhost.fnal.gov">&2
    
    exit 1
}

CPUS=''
for arg in $@; do
    case $1 in
        -- )
            # end of getopt args, shift off the -- and get out of the loop
            shift
            break 2
           ;;
         -p )
            CPUS=$2
            shift 2
           ;;
         -h )
            # get help
            usage
           ;;
    esac
done

HOSTNAME=$1

if [[ "x$CPUS" == 'x' ]]; then
    echo '' >&2
    echo ' You did not set -p' >&2
    echo '' >&2
    usage
fi

if [[ "x$HOSTNAME" == 'x' ]]; then
    echo '' >&2
    echo ' You did not set a hostname!' >&2
    echo '' >&2
    usage
fi

if [[ ! -f /etc/pki/koji/pems/${HOSTNAME}.pem ]]; then
    if [[ ! -x '/etc/pki/koji/make_koji_service_cert.sh' ]]; then
        echo '' >&2
        echo " Can't run /etc/pki/koji/make_koji_service_cert.sh" >&2
        echo '' >&2
        exit 1
    fi
    /etc/pki/koji/make_koji_service_cert.sh -c $HOSTNAME >/dev/null 2>&1
    if [[ ! -f /etc/pki/koji/pems/${HOSTNAME}.pem ]]; then
        echo "Couldn't create /etc/pki/koji/pems/${HOSTNAME}.pem" >&2
        exit 1
    fi
    echo "Created host cert in /etc/pki/koji/pems/${HOSTNAME}.pem"
fi

# put the host key in the right place on the remote host
ssh root@$HOSTNAME "mkdir -p /etc/kojid/"
scp /etc/pki/koji/pems/${HOSTNAME}.pem root@${HOSTNAME}:/etc/kojid/
if [[ $? -ne 0 ]]; then
    echo "Can't deploy certificate to remote host" >&2
    echo "scp /etc/pki/koji/pems/${HOSTNAME}.pem root@${HOSTNAME}:/etc/kojid/" >&2
    exit 1
fi

# put the CA key in the right place on the remote host
ssh root@$HOSTNAME "mkdir -p /etc/pki/koji/"
scp /etc/pki/koji/ca_cert.crt root@${HOSTNAME}:/etc/pki/koji/
if [[ $? -ne 0 ]]; then
    echo "Can't deploy CA certificate to remote host" >&2
    echo "scp /etc/pki/koji/ca_cert.crt root@${HOSTNAME}:/etc/pki/koji/" >&2
    exit 1
fi

# Load average can be a bit higher than num cpus and it is ok
LOAD_AVERAGE=$(expr $CPUS + 1 )

su -l koji -c "~/cleanup-koji-host $HOSTNAME"
if [[ $? -ne 0 ]]; then
    echo "Can't clean up bogus entry" 2>&1
    echo "su -l koji -c '~/cleanup-koji-host $HOSTNAME'" 2>&1
    exit 1
fi

# this makes a host recognized
koji add-host $HOSTNAME x86_64 i386

if [[ $? -ne 0 ]]; then
    echo "Failed to run 'koji add-host $HOSTNAME x86_64 i686'" >&2
    echo "Return code not '0'" >&2
    exit 200
fi

# this lets a host rebuild repos it modified
koji add-host-to-channel $HOSTNAME createrepo
if [[ $? -ne 0 ]]; then
    echo "Failed to run 'koji add-host-to-channel $HOSTNAME createrepo'" >&2
    echo "Return code not '0'" >&2
    exit 200
fi

# this tells koji how much load to put on this new system
su -l koji -c "psql koji --command \"update host set capacity = $LOAD_AVERAGE where name = '$HOSTNAME';\"" >/dev/null 2>&1
if [[ $? -ne 0 ]]; then
    echo "Failed to set host capacity" >&2
    exit 200
fi

# this tells koji how to describe this system
su -l koji -c "psql koji --command \"update host set description = 'The $HOSTNAME system' where name = '$HOSTNAME';\"" >/dev/null 2>&1
if [[ $? -ne 0 ]]; then
    echo "Failed to set host description" >&2
    exit 200
fi
