#!/bin/bash
####################################################
# HEADER: This file was autogenerated by puppet.
#
# FILE: modules/koji/files/etc/pki/koji/make_koji_cert.sh
#
# /etc/pki/koji/make_koji_cert.sh file for machine [<%= fqdn %>]
#
#####################################################

BASE=/etc/pki/koji/
BASE_DN="/C=US/ST=STATE/L=CITY/O=EXAMPLE/OU=BUSINESS UNIT"
HOSTNAME=$(hostname --long)

usage() {
    echo "$0 -c <stuff> [-o <stuff>]" >&2
    echo '' >&2
    echo '    -c name you are authenticating '>&2
    echo '      ie. "builder.exaple.com" or "koji"' >&2
    echo '' >&2
    echo ' Optional:' >&2
    echo '    -o if you wish to add in an "OU"' >&2
    echo '      ie "kojiweb"' >&2
    echo '' >&2
    echo ' Examples:' >&2
    echo "   $0 -c myhost -o koji-web" >&2
    echo "   $0 -c myhost.example.com " >&2
    echo "   $0 -c myusername" >&2
    echo '' >&2
    echo " The key will automatically be signed using" >&2
    echo "  $BASE/private/ca_cert.key" >&2
    echo "  $BASE/ca_cert.crt" >&2
    echo '' >&2
    echo " Keys will be left in $BASE/private" >&2
    echo " CSRs will be left in $BASE/csrs" >&2
    echo " Certs will be left in $BASE/certs" >&2
    echo " pem will be left in $BASE/pems" >&2
    echo " pkcs12 will be left in $BASE/pkcs12s" >&2
    exit 200
}

args=$(getopt -o ho:c: -- "$@")
eval set -- "$args"

CN=''
OU=''
for arg in $@; do
    case $1 in
        -h )
            # get help
            usage
           ;;
        -o )
            OU=$2
            echo 'here'
            shift 2
           ;;
        -c )
            CN=$2
            echo 'there'
            shift 2
           ;;
        -- )
            # end of getopt args, shift off the -- and get out of the loop
            shift
            break 2
           ;;
    esac
done


if [[ "x$CN" == 'x' ]]; then
    usage
fi

if [[ ! -d $BASE ]]; then
    echo "Can't find $BASE" >&2
    exit 200
fi

if [[ ! -f $BASE/openssl.cnf ]]; then
    echo "Can't find $BASE/openssl.cnf" >&2
    exit 200
fi

for dir in private csrs certs pems pkcs12s; do
    mkdir -p $BASE/$dir
    if [[ ! -d $BASE/$dir ]]; then
        echo "Can't find $BASE/$dir" >&2
        exit 200
    fi
    if [[ ! -w $BASE/$dir ]]; then
        echo "Can't write to $BASE/$dir" >&2
        exit 200
    fi
done

chmod 751 $BASE/private >/dev/null 2>&1
chmod 751 $BASE/pkcs12s >/dev/null 2>&1
chmod 751 $BASE/pems >/dev/null 2>&1

chgrp koji $BASE/private >/dev/null 2>&1
chgrp koji $BASE/pkcs12s >/dev/null 2>&1
chgrp koji $BASE/pems >/dev/null 2>&1

CERT_FOR="$BASE_DN"
NAME=$CN

if [[ "x$OU" != 'x' ]]; then
    NAME=${CN}_${OU}
    CERT_FOR="$CERT_FOR/OU=$OU/CN=${CN}/emailAddress=${OU}@${HOSTNAME}"
else
    CERT_FOR="$CERT_FOR/CN=${CN}/emailAddress=${CN}@${HOSTNAME}"
fi

cd $BASE

# clean up any old versions
rm -f $BASE/private/${NAME}.key $BASE/csrs/${NAME}.csr $BASE/certs/${NAME}.crt $BASE/pems/${NAME}.pem $BASE/pkcs12s/${NAME}.p12

echo "Making private key" >&2
echo "  openssl genrsa -out $BASE/private/${NAME}.key 2048" >&2
openssl genrsa -out $BASE/private/${NAME}.key 2048 >/dev/null
echo '' >&2

echo "Making CSR" >&2
echo "  openssl req -config $BASE/openssl.cnf -new -nodes -out $BASE/csrs/${NAME}.csr -key $BASE/private/${NAME}.key -subj '$CERT_FOR'" >&2
openssl req -config $BASE/openssl.cnf -new -nodes -out $BASE/csrs/${NAME}.csr -key $BASE/private/${NAME}.key -subj "$CERT_FOR" >/dev/null
echo '' >&2

echo "Signing CSR" >&2
echo "  openssl ca -config $BASE/openssl.cnf -keyfile $BASE/private/ca_cert.key -cert $BASE/ca_cert.crt -outdir $BASE/certs/ -out $BASE/certs/${NAME}.crt -infiles $BASE/csrs/${NAME}.csr" >&2
yes | openssl ca -config $BASE/openssl.cnf -keyfile $BASE/private/ca_cert.key -cert $BASE/ca_cert.crt -outdir $BASE/certs/ -out $BASE/certs/${NAME}.crt -infiles $BASE/csrs/${NAME}.csr >/dev/null
echo '' >&2

echo "Making PEM" >&2
echo "  cat $BASE/certs/${NAME}.crt $BASE/private/${NAME}.key >$BASE/pems/${NAME}.pem" >&2
cat $BASE/certs/${NAME}.crt $BASE/private/${NAME}.key >$BASE/pems/${NAME}.pem 2>/dev/null
chmod 644 $BASE/pems/${NAME}.pem
chgrp koji $BASE/pems/${NAME}.pem >/dev/null 2>&1
echo ''

echo "Making pkcs12" >&2
echo "  openssl pkcs12 -export -inkey $BASE/private/${NAME}.key -in $BASE/certs/${NAME}.crt -CAfile $BASE/ca_cert.crt -out $BASE/pkcs12s/${NAME}.p12 -name '${NAME}' -password pass:" >&2
openssl pkcs12 -export -inkey $BASE/private/${NAME}.key -in $BASE/certs/${NAME}.crt -CAfile $BASE/ca_cert.crt -out $BASE/pkcs12s/${NAME}.p12 -name "${NAME}" -password pass: >/dev/null
chmod 644 $BASE/pkcs12s/${NAME}.p12
chgrp koji $BASE/pkcs12s/${NAME}.p12 >/dev/null 2>&1
echo '' >&2


